PROMPT 1: add map, GPS walk, obstacles, area
You are my frontend engineer. Wire up Leaflet and Turf into the existing UI. Install and configure: leaflet, react-leaflet, @turf/turf, @types/leaflet. In MapCanvas, render a Leaflet map centered on the user’s geolocation if permitted, else UK center (lat 52.355, lng -1.174). Implement Start and Stop to control a GPS recorder using navigator.geolocation.watchPosition with enableHighAccuracy true, maximumAge 0, timeout 15000. While recording, append [lng, lat] to a boundary array every time accuracy <= 15m and the point is at least 2m from the last one. Show an accuracy circle around current position. Draw the boundary as a Leaflet Polygon when there are 3+ points. Close the ring when computing area using turf.area on a valid GeoJSON polygon. Show live area readout in sqm and acres in the Survey panel (convert acres = sqm * 0.000247105). Add manual vertex mode: clicking the map adds a point to the boundary; an Undo action removes the last point. Add obstacle mode: clicking “Obstacle” toggles placement; the next map click drops a Marker and opens a mini form (select type: pond, tree, structure, other; optional note; optional radius meters default 3). Store obstacles in state with id, type, coords, radius, note. Persist nothing beyond current session for now. Make sure the map resizes correctly when the sidebar changes and on mobile. Keep the floating controls working.

PROMPT 2: global state with zustand and types
Install zustand and zod. Create a types file with Project, Obstacle, FinanceParams, HouseType, LayoutEstimate as previously described. Create a zustand store useStore with: projects array, activeProjectId, actions createProject, updateProject(partial by id), deleteProject, setActiveProject. Seed default finance params and a few HouseTypes (2-bed semi 75 GIA, 3-bed semi 90, 3-bed det 105, 4-bed det 130; include footprint sqm for each). Wire Survey/Layout/Finance panels to read/write the active project via the store. When a new project is created, initialize empty boundary and obstacles, default houseTypeId, default finance params. Move all boundary, obstacle, and area logic to the store-backed active project.

PROMPT 3: layout estimate using simple heuristic
Create a geo utility module. Implement a function estimateLayout(project, financeParams, selectedHouseType) that: builds a polygon from project.boundary; buffers each obstacle by radius (financeParams.obstacleBufferM if obstacle radius missing); unions obstacle buffers; subtracts from the site polygon using turf.difference to get net polygon; compute netDevelopableSqm = area(net polygon) * (1 - roadsOpenSpacePct). Use houseType.footprintSqm for packing. estimatedUnits = floor(netDevelopableSqm / footprintSqm). Generate a point grid over the net polygon with spacing = sqrt(footprintSqm) * 1.4; collect the first N points inside the polygon where N = estimatedUnits; save their coordinates as placedHomes for preview markers. Return LayoutEstimate { netDevelopableSqm, estimatedUnits, placedHomes }. In the Layout panel, on house type change or when obstacles/boundary change, recompute and display estimatedUnits and an optional toggle to show placedHomes markers on the map.

PROMPT 4: finance formulas and live KPIs
Create finance utilities. Inputs: pricePerSqft, buildCostPerSqft, feesPct, contingencyPct, profitPctOfGDV, plus avgGiaSqm from selected house type and estimatedUnits from layout. Convert £/sqft to £/sqm by multiplying by 10.7639. GDV = estimatedUnits * avgGiaSqm * pricePerSqm. Build = estimatedUnits * avgGiaSqm * buildCostPerSqm. Fees = feesPct * Build. Contingency = contingencyPct * Build. Profit = profitPctOfGDV * GDV. TotalDevCost = Build + Fees + Contingency + Profit. ResidualLandValue = GDV - TotalDevCost. Expose a computeFinance(project) that returns all numbers rounded to nearest pound. Wire the Finance panel so edits recalc live, and show GDV and Residual as big KPI cards. Handle zero or NaN states gracefully.

PROMPT 5: offer pack PDF export matching the UI
Install pdfmake and html2canvas. Implement exportOfferPdf(project) that: captures the map div to a dataURL via html2canvas at device pixel ratio 2; assembles a pdfmake document with: title (project name, address, date), the captured map image at full width, a Site Metrics section (gross area sqm and acres, net developable sqm, roads/open-space percent, estimated units, selected house type label), a Finance Summary table (GDV, Build, Fees, Contingency, Profit, Total Dev Cost, Residual Land Value), an Assumptions table (price £/sqft, build £/sqft, fees %, contingency %, profit %, obstacle buffer m), and an Obstacles list (type and note). Use brand blue #2563EB for section headings and thin dividers. Call export from the Topbar Export button. If the boundary is invalid, show a polite alert instead of exporting.

PROMPT 6: local persistence and import/export JSON
Create a simple persistence module that saves the projects array to localStorage under a stable key whenever projects change (debounced 500 ms). Load on app start. Provide Import and Export buttons in Topbar: Export downloads a JSON file of all projects; Import opens a file input, validates shape with zod, merges or replaces after user confirmation. Confirm before destructive actions like delete project.

PROMPT 7: PWA shell and mobile polish
Install and configure vite-plugin-pwa. Add a manifest with name LandSnap, short_name LandSnap, theme_color #2563EB, background_color #FFFFFF, icons placeholders, display standalone, orientation portrait. Generate a basic service worker that precaches the app shell; do not cache map tiles. Add an install hint toast on first load on mobile with a dismiss option. Prevent screen sleep while GPS is recording using the Wake Lock API if available; otherwise suggest the user keeps the screen on.

PROMPT 8: QA checklist and fixes
Add a developer test route or hidden debug panel with controls: simulate GPS path with a polyline; clear boundary; add random obstacles; dump derived metrics. Verify: starting GPS creates points and area grows sensibly; manual points work; obstacles draw and affect net area; layout estimated units changes when house type footprint changes; finance KPIs update immediately when inputs change; PDF exports with a clear map image and correct numbers; reload preserves projects; PWA install works on Android Chrome and iOS Safari (Add to Home Screen). Fix any uncaught errors, ensure mobile tap targets are 40px+, and that the map controls don’t overlap system UI.